import json
import os
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, CallbackQueryHandler, filters
)

ASK_TITLE, ASK_AUTHOR = range(2)
BOOKS_FILE = "books.json"

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–Ω–∏–≥
def load_books():
    if os.path.exists(BOOKS_FILE):
        with open(BOOKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_books(books):
    with open(BOOKS_FILE, "w", encoding="utf-8") as f:
        json.dump(books, f, ensure_ascii=False, indent=2)

my_books = load_books()

# –ö–æ–º–∞–Ω–¥–∞ /start –∑ –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–æ–∫", callback_data="books"),
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–Ω–∏–∂–∫—É", callback_data="add")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "books":
        if not my_books:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üòî")
        else:
            message = "–û—Å—å –º–æ—ó –∫–Ω–∏–∂–∫–∏:\n\n" + "\n".join(my_books)
            await query.edit_message_text(message)

    elif query.data == "add":
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–∂–∫–∏ üìñ:")
        return ASK_TITLE

# –ö—Ä–æ–∫ 1: –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏
async def ask_author(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['title'] = update.message.text
    await update.message.reply_text("–•—Ç–æ –∞–≤—Ç–æ—Ä —Ü—ñ—î—ó –∫–Ω–∏–∂–∫–∏? ‚úçÔ∏è")
    return ASK_AUTHOR

# –ö—Ä–æ–∫ 2: –í–≤–µ–¥–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∞
async def finish_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    author = update.message.text
    title = context.user_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
    entry = f"üìò {title} ‚Äî {author}"
    my_books.append(entry)
    save_books(my_books)
    await update.message.reply_text(f"‚úÖ –ö–Ω–∏–∂–∫—É –¥–æ–¥–∞–Ω–æ: {entry}")
    return ConversationHandler.END

# –í–∏—Ö—ñ–¥ –∑ –¥—ñ–∞–ª–æ–≥—É
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    TOKEN = "7838786752:AAEWC6yMnU9kqWa2mNMGMbYzwxK9rhsMOCU"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(handle_button, pattern="^books$"))
    # –î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    conv_handler = ConversationHandler(
        per_message=True,
        entry_points=[
            CommandHandler("add", handle_button),
            CallbackQueryHandler(handle_button, pattern="^add$")
        ],
        states={
            ASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_author)],
            ASK_AUTHOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_add)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –∑ –∫–Ω–æ–ø–∫–∞–º–∏!")
    app.run_polling()
