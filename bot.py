import os
import json
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, CallbackQueryHandler, filters
)

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
ASK_TITLE, ASK_AUTHOR = range(2)

# –§–∞–π–ª —ñ –ø–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
BOOKS_FILE = "books.json"
PDF_FOLDER = "pdf_books"

# ----------------------------------------
# üîÉ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–Ω–∏–∂–æ–∫
# ----------------------------------------

def load_books():
    if os.path.exists(BOOKS_FILE):
        with open(BOOKS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_books(books):
    with open(BOOKS_FILE, "w", encoding="utf-8") as f:
        json.dump(books, f, ensure_ascii=False, indent=2)

my_books = load_books()

# ----------------------------------------
# üìö –û–±—Ä–æ–±–Ω–∏–∫–∏
# ----------------------------------------

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–æ–∫", callback_data="books"),
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–Ω–∏–∂–∫—É", callback_data="add")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "books":
        if not my_books:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üòî")
        else:
            message = "–û—Å—å –º–æ—ó –∫–Ω–∏–∂–∫–∏:\n\n" + "\n".join(my_books)
            await query.edit_message_text(message)

    elif query.data == "add":
        await query.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–∂–∫–∏ üìñ:")
        return ASK_TITLE

# –ü–æ—á–∞—Ç–æ–∫ –¥—ñ–∞–ª–æ–≥—É /add
async def ask_author(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['title'] = update.message.text
    await update.message.reply_text("–•—Ç–æ –∞–≤—Ç–æ—Ä —Ü—ñ—î—ó –∫–Ω–∏–∂–∫–∏? ‚úçÔ∏è")
    return ASK_AUTHOR

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ–∞–ª–æ–≥—É
async def finish_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    author = update.message.text
    title = context.user_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
    entry = f"üìò {title} ‚Äî {author}"
    my_books.append(entry)
    save_books(my_books)
    await update.message.reply_text(f"‚úÖ –ö–Ω–∏–∂–∫—É –¥–æ–¥–∞–Ω–æ: {entry}")
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –û—Ç—Ä–∏–º–∞—Ç–∏ PDF –∫–Ω–∏–∂–∫—É
async def get_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "‚ùó –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∫–Ω–∏–∂–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "`/get –ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü ‚Äî –ï–∫–∑—é–ø–µ—Ä—ñ`", parse_mode="Markdown"
        )
        return

    filename = " ".join(context.args).strip() + ".pdf"
    file_path = os.path.join(PDF_FOLDER, filename)

    if not os.path.exists(file_path):
        await update.message.reply_text("üìÇ –¶—ñ—î—ó –∫–Ω–∏–∂–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF üòî")
        return

    await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
    await update.message.reply_document(document=open(file_path, "rb"), filename=filename)

# ----------------------------------------
# üèÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ----------------------------------------

if __name__ == '__main__':
    TOKEN = os.getenv("TOKEN")  # üîê –ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("get", get_book))
    app.add_handler(CallbackQueryHandler(handle_button, pattern="^books$"))

    # –î—ñ–∞–ª–æ–≥–æ–≤–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    conv_handler = ConversationHandler(
        per_message=True,
        entry_points=[
            CommandHandler("add", handle_button),
            CallbackQueryHandler(handle_button, pattern="^add$")
        ],
        states={
            ASK_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_author)],
            ASK_AUTHOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_add)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)

    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
    app.run_polling()
