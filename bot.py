import os
import sqlite3
from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, filters
)

PDF_FOLDER = "pdf_books"
DB_PATH = "books.db"

# üìö –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é
def get_all_books():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, author FROM books")
    books = cursor.fetchall()
    conn.close()
    return books

def get_random_books(n=3):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, author FROM books ORDER BY RANDOM() LIMIT ?", (n,))
    books = cursor.fetchall()
    conn.close()
    return books

def get_book_file_by_id(book_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT filename FROM books WHERE id = ?", (book_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# üîò /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–æ–∫", callback_data="books"),
            InlineKeyboardButton("üé≤ –©–æ –ø–æ—á–∏—Ç–∞—Ç–∏?", callback_data="recommend")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:", reply_markup=reply_markup)

# üì• /get –Ω–∞–∑–≤–∞
async def get_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "‚ùó –ù–∞–ø–∏—à–∏ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–∑–≤–∏ –∫–Ω–∏–∂–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            "`/get —Å–µ–Ω—Å—É`", parse_mode="Markdown"
        )
        return

    keyword = " ".join(context.args).strip().lower()

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT filename FROM books WHERE LOWER(title) LIKE ?", (f"%{keyword}%",))
    result = cursor.fetchone()
    conn.close()

    if not result:
        await update.message.reply_text("üìÇ –¶—ñ—î—ó –∫–Ω–∏–∂–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF üòî")
        return

    filename = result[0]
    file_path = os.path.join(PDF_FOLDER, filename)

    if os.path.exists(file_path):
        await update.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
        await update.message.reply_document(document=open(file_path, "rb"), filename=filename)
    else:
        await update.message.reply_text("üìÇ –¶—ñ—î—ó –∫–Ω–∏–∂–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF üòî")

# üîò –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "books":
        books = get_all_books()
        if not books:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–∂–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üòî")
        else:
            message = "–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–Ω–∏–∂–∫–∏:\n\n"
            for book in books:
                message += f"üìò {book[1]} ‚Äî {book[2]}\n"
            await query.edit_message_text(message)

    elif query.data == "recommend":
        books = get_random_books()
        if not books:
            await query.edit_message_text("üìÇ –£ –º–µ–Ω–µ —â–µ –Ω–µ–º–∞—î –∫–Ω–∏–∂–æ–∫ –¥–ª—è –ø–æ—Ä–∞–¥ üò•")
            return

        buttons = [
            [InlineKeyboardButton(f"üìò {title}", callback_data=f"get::{book_id}")]
            for book_id, title, author in books
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        text = "üìñ *–©–æ –ø–æ—á–∏—Ç–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?*\n\n" + "\n".join(f"üîπ {b[1]} ‚Äî {b[2]}" for b in books)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data.startswith("get::"):
        book_id = query.data.replace("get::", "")
        filename = get_book_file_by_id(book_id)
        if not filename:
            await query.message.reply_text("üìÇ –¶—é –∫–Ω–∏–∂–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF üò•")
            return

        file_path = os.path.join(PDF_FOLDER, filename)
        if os.path.exists(file_path):
            await query.message.chat.send_action(action=ChatAction.UPLOAD_DOCUMENT)
            await query.message.reply_document(document=open(file_path, "rb"), filename=filename)
        else:
            await query.message.reply_text("üìÇ –¶—é –∫–Ω–∏–∂–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF üò•")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    TOKEN = os.getenv("TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("get", get_book))
    app.add_handler(CommandHandler("recommend", start))  # –∞–±–æ –∑—Ä–æ–±–∏ –æ–∫—Ä–µ–º—É recommend_books
    app.add_handler(CallbackQueryHandler(handle_button))

    print("‚úÖ –ë–æ—Ç –ø—Ä–∞—Ü—é—î!")
    app.run_polling()
